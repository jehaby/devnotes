* Wire
wire - DI container with code-generation.
** Сравнение Wire с остальными (Uber's dig and Facebook's inject)
Wire использует кодогенерацию, вместо runtime-reflection. 
Преимущества: 
- проще разбираться и дебажить, значительно меньше магии
- будет ругаться при компиляции на лишние/отсутствующие зависимости
- не нужно выдумывать имена для объектов контейнера
- сгенерированный код -- обычный читаемый Go-код. Который из коробки поддерживается стандартным тулингом (
  поиск использования, объявления, переименования, ...)

** Основные понятия (concepts)
*** Provider 
Regular Go function that returns value. Written by hand.
Like a constructor (?).
*** Injector
You write injector signature by hand (some func containing ~wire.Build~), then after 
running ~wire~ in app directory you get generated injector.

Arguments to wire.Build are the same as wire.NewSet: they form a provider set.

Any non-injector declarations found in a file with injectors will be copied into the generated file.

** API
*** wire.Struct()
have to use ~new(Smth)~, not ~&Smth{}~

use ~wire.Struct(new(Smth), for injecting all fields)


*** ProviderSet

** Resources
- Введение: https://blog.golang.org/wire 
- АПИ: https://godoc.org/github.com/google/wire
- Github: https://github.com/google/wire
- Tutorial: https://github.com/google/wire/tree/master/_tutorial
- Docs: https://github.com/google/wire/tree/master/docs
- Big sample application: https://github.com/google/go-cloud/tree/master/samples/guestbook
